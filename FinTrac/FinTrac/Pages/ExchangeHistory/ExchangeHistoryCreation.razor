@page "/ExchangeHistory/ExchangeHistoryCreation"
@inject IExchangeHistoryController ExchangeHistoryController


<head>
    <h1>Exchange History Creation</h1>
</head>

<br/>

<div>
    @if (ErrorAlert.isError)
    {
        <ErrorAlert errorTxt="@errorTxt"/>
    }
</div>

<br/>

<form>
    <div class="form-group">
        <label for="title">Value</label>
        <input type="number" class="form-control" id="Name" @bind="value"/>
    </div>

    <br/>
    <div class="form-group">
        <label for="title">Value of Exchange to Register</label>
        <input type="date" class="form-control" id="Name" @bind="valueDate"/>
    </div>

    <br/>

    <label for="title">Currency To Select </label>
    <select class="form-select" aria-label="multiple select example" @bind="valueCurrency">

        @foreach (CurrencyEnumDTO currency in Enum.GetValues(typeof(CurrencyEnumDTO)))
        {
            <option value="@currency">@currency</option>
        }

    </select>

    <button type="button" class="btn btn-primary" @onclick="saveExchange">Guardar cambios</button>
    <a href="/ExchangeHistories">Cancelar</a>
</form>

<br/>

<div>
    @if (SuccesAlert.IsSucess)
    {
        <SuccesAlert errorTxt="Exchange history created successfully"/>
    }

</div>


@code
{
    private decimal value;
    private CurrencyEnumDTO valueCurrency;
    private DateTime valueDate;

    [CascadingParameter]
    public UserDTO userConnected { get; set; }

    public string errorTxt { get; set; }

    protected override void OnInitialized()
    {
        ResetValues();
    }

    private async void saveExchange()
    {
        try
        {
            ExchangeHistoryDTO exchangeHistoryValue = new ExchangeHistoryDTO(valueCurrency, value, valueDate, userConnected.UserId);
            ExchangeHistoryController.CreateExchangeHistory(exchangeHistoryValue);
            
            SuccesAlert.ShowSucessAlert();
            await Task.Delay(1500);
            ResetValues();
        }
        catch (Exception ExceptionExchangeHistory)
        {
            errorTxt = ExceptionExchangeHistory.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }

    private void ResetValues()
    {
        valueCurrency = CurrencyEnumDTO.USA;
        valueDate = DateTime.Now.Date;
        value = 0;

        InvokeAsync(() =>
        {
            SuccesAlert.IsSucess = false;
            ErrorAlert.isError = false;
            StateHasChanged();
        });
    }

}