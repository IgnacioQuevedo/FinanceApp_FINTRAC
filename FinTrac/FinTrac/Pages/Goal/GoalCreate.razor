@page "/Goal/GoalCreation"

@using Controller.IControllers
@inject ICategoryController CategoryController;
<h3>Goal Creation</h3>

@if (ErrorAlert.isError)
{
    <ErrorAlert errorTxt="@errorTxt" />
}

<form>
    <div class="form-group">
        <label for="title">Title</label>
        <input type="text" class="form-control" id="Name" @bind="title" />
    </div>

    <br />

    <div class="form-group">
        <label for="title">Max Amount To Spend</label>
        <input type="number" class="form-control" id="Name" @bind="maxAmount" />
    </div>

    <br />

    <div>
        <label for="title">Currency Type</label>
        <select class="form-select" aria-label="Default select example" @bind="currencyType">
            <option value="@CurrencyEnumDTO.UY">@CurrencyEnumDTO.UY</option>
            <option value="@CurrencyEnumDTO.USA">@CurrencyEnumDTO.USA</option>
            <option value="@CurrencyEnumDTO.EUR">@CurrencyEnumDTO.EUR</option>
        </select>
    </div>
    <br />

    <select class="form-select" aria-label="multiple select example" multiple @onchange="OnChangeCategories">

        @foreach (var category in allCategoriesCreated)
        {
            <option value="@category.CategoryId">@category.Name</option>
        }

    </select>

    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Guardar cambios</button>
    <a href="/Goals">Cancelar</a>
</form>

@if (SuccesAlert.IsSucess)
{
    <SuccesAlert errorTxt="Goal created successfully" />
}




@code
{
    private string title;
    private int maxAmount;
    private CurrencyEnumDTO currencyType;
    private List<CategoryDTO> categoriesAssignedToGoal;
    private List<CategoryDTO> allCategoriesCreated;

    [CascadingParameter]

    public UserDTO userConnected { get; set; }

    private GoalDTO goalToCreate;

    public string errorTxt { get; set; }

    protected override void OnInitialized()
    {
        ResetValues();
    }

    private async void SaveChanges()
    {
        try
        {
            goalToCreate = new GoalDTO(title, maxAmount, currencyType, categoriesAssignedToGoal, userConnected.UserId);
            SuccesAlert.ShowSucessAlert();
            await Task.Delay(2000);
            ResetValues();
        }
        catch (Exception ExceptionGoal)
        {
            errorTxt = ExceptionGoal.Message;
            ErrorAlert.ShowErrorAlert();
        }

    }

    public void OnChangeCategories(ChangeEventArgs elementSelected)
    {
        var stringValue = (string[])elementSelected.Value;
        var categoriesSelected = new List<CategoryDTO>();

        foreach (var stringId in stringValue)
        {
            var categorySelected = CategoryController.FindCategory(int.Parse(stringId));
            categoriesSelected.Add(categorySelected);
        }
        categoriesAssignedToGoal = categoriesSelected;
    }

    private void ResetValues()
    {
        title = "";
        maxAmount = 0;
        // allCategoriesCreated = userConnected.GetCategories();
        categoriesAssignedToGoal = new List<CategoryDTO>();
        ErrorAlert.isError = false;
        SuccesAlert.IsSucess = false;

        InvokeAsync(() =>
        {
            SuccesAlert.IsSucess = false;
            ErrorAlert.isError = false;
            StateHasChanged();
        });
    }
}
