@page "/Transactions/{accountId:int}";

@using BusinessLogic.Transaction_Components;
@using BusinessLogic.Account_Components;

<PageTitle>Accounts</PageTitle>
<h3>AccountList</h3>


@if (ErrorAlert.isError)
{
    <ErrorAlert errorTxt="@errorTxt" />
}

<h1>
    Transaction
    <a class="btn btn-success btn-sm" style="float: right;margin-right: 40px;"
       onclick="@(() => NavigationManager.NavigateTo($"/Transactions/{accountId}/CreateTransaction"))">
        Create Transaction +
    </a>
</h1>


<br />
<br />

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Creation Date</th>
            <th>Amount</th>
            <th>Currency</th>
            <th>Type</th>
            <th>Category</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var transaction in transactionList.Where(t => t != null))
        {
                <tr>
                <td>@transaction.Title</td>
                <td>@GetFormattedDate(@transaction.CreationDate)</td>
                <td>@transaction.Amount</td>
                <td>@transaction.Currency</td>
                <td>@transaction.Type</td>
                <td>@transaction.TransactionCategory.Name</td>
                    <td>
                        <button class="btn btn-success btn-sm" onclick="@(() => NavigationManager.NavigateTo($"/Transactions/{accountId}/EditTransaction/{@transaction.TransactionId}"))"> Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="(() => DeleteTransaction(transaction.TransactionId))">Delete</button>
                        <button class="btn btn-danger btn-sm" @onclick="(() => DuplicateTransaction(transaction.TransactionId))">Duplicate</button>
                </td>
                </tr>

        }
    </tbody>
</table>

@if (SuccesAlert.IsSucess)
{
    <SuccesAlert errorTxt="Transaction deleted successfully" />
}


<br />
<br />

@code {
    private List<Transaction>? transactionList;

    private Account accountSelected;

    private Transaction transactionBeforeDelete;

    [CascadingParameter]
    public User user { get; set; }

    [Parameter]
    public int accountId { get; set; }

    public string errorTxt { get; set; }

    protected override void OnInitialized()
    {
        accountSelected = user.MyAccounts[accountId];
        transactionList = accountSelected.MyTransactions;
        ErrorAlert.isError = false;
        SuccesAlert.IsSucess = false;
    }

    private void DeleteTransaction(int transactionId)
    {
        try
        {
            transactionBeforeDelete = user.MyAccounts[accountId].MyTransactions[transactionId];
            user.MyAccounts[accountId].DeleteTransaction(user.MyAccounts[accountId].MyTransactions[transactionId]);
            accountSelected.UpdateAccountAfterDelete(transactionBeforeDelete);
            SuccesAlert.ShowSucessAlert();
        }
        catch(Exception ExceptionTransaction)
        {

            errorTxt = ExceptionTransaction.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }

    string GetFormattedDate(DateTime date)
    {
        return date.ToString("dd/MM/yyyy");
    }

    private void DuplicateTransaction(int transactionId)
    {
        Transaction transactionToDuplicate = transactionList[transactionId];
        Transaction transaction = new Transaction(transactionToDuplicate.Title, transactionToDuplicate.Amount, transactionToDuplicate.CreationDate, 
            transactionToDuplicate.Currency, transactionToDuplicate.Type,transactionToDuplicate.TransactionCategory);
        accountSelected.AddTransaction(transaction);
    }

}




