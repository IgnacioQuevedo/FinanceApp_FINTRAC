@page "/Transactions/{accountId:int}";
@inject ITransactionController TransactionController

<PageTitle>Accounts</PageTitle>
<h3>AccountList</h3>


@if (ErrorAlert.isError)
{
    <ErrorAlert errorTxt="@errorTxt"/>
}

<h1>
    Transaction
    <a class="btn btn-success btn btn-primary fa-lg gradient-custom-4 mb-3" style="float: right;margin-right: 40px;"
       onclick="@(() => NavigationManager.NavigateTo($"/Transactions/{accountId}/CreateTransaction"))">
        Create Transaction +
    </a>
</h1>

<br/>
<br/>
@if (transactions != null && transactions.Count > 0)
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Creation Date</th>
            <th>Amount</th>
            <th>Currency</th>
            <th>Type</th>
            <th>Category</th>
        </tr>
        </thead>
        <tbody>

        @foreach (var transaction in transactions)
        {
            <tr>
                <td>@transaction.Title</td>
                <td>@GetFormattedDate(@transaction.CreationDate)</td>
                <td>@transaction.Amount</td>
                <td>@transaction.Currency</td>
                <td>@transaction.Type</td>
                <td>@transaction.TransactionCategory.Name</td>
                <td>
                    <button class="btn btn-success" onclick="@(() => NavigationManager.NavigateTo($"/Transactions/{accountId}/EditTransaction/{@transaction.TransactionId}"))"> Edit</button>
                    <button class="btn btn-danger" @onclick="(() => DeleteTransaction(transaction.TransactionId))">Delete -</button>
                    <button class=" btn btn-warning" @onclick="(() => DuplicateTransaction(transaction.TransactionId))">Duplicate +</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    {
        <table class="table table-striped table-bordered claseTabla">
            <tbody>
            <tr>
                <td>There are no transactions to show, click the above button to create one</td>
            </tr>
            </tbody>
        </table>
    }
}

@if (showDuplicateScreen)
{
    <label>To duplicate this transaction just select a new date from below</label>
    <div>
        <label for="title">Creation Date</label>
        <input type="date" class="form-control" id="creationDate" @bind="transactionDuplicated.CreationDate"/>
        <button class="btn btn-danger btn-sm" @onclick="(() => createCopy())">Create Duplication</button>
    </div>
}

@if (SuccesAlert.IsSucess)
{
    <SuccesAlert errorTxt="Transaction deleted successfully"/>
}


<br/>
<br/>

@code {
    private List<TransactionDTO>? transactions;
    private TransactionDTO transactionBeforeDelete;
    private TransactionDTO transactionDuplicated;
    private AccountDTO accountWithTransactions;
    private bool showDuplicateScreen;

    [CascadingParameter]
    public UserDTO userConnected { get; set; }

    [Parameter]
    public int accountId { get; set; }

    public string errorTxt { get; set; }


    protected override void OnInitialized()
    {
        accountWithTransactions = TransactionController.FindAccountById(accountId, userConnected.UserId);
        transactions = TransactionController.GetAllTransactions(accountWithTransactions);
        ErrorAlert.isError = false;
        SuccesAlert.IsSucess = false;
        showDuplicateScreen = false;
    }

    private async Task DeleteTransaction(int transactionId)
    {
        try
        {
            TransactionDTO transactionDtoToDelete = TransactionController.FindTransaction(transactionId, accountId, userConnected.UserId);
            TransactionController.DeleteTransaction(transactionDtoToDelete,userConnected.UserId);
            ResetValues();
            await Task.Delay(1);
            SuccesAlert.ShowSucessAlert();
        }
        catch (Exception ExceptionTransaction)
        {
            errorTxt = ExceptionTransaction.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }

    private void createCopy()
    {
        TransactionController.CreateTransaction(transactionDuplicated,userConnected.UserId);
        showDuplicateScreen = false;
        SuccesAlert.ShowSucessAlert();
        ResetValues();
    }

    private void DuplicateTransaction(int transactionId)
    {
        TransactionDTO transactionToDuplicate =
            TransactionController.FindTransaction(transactionId, accountId, userConnected.UserId);

        transactionDuplicated = new TransactionDTO(transactionToDuplicate.Title, transactionToDuplicate.CreationDate,
            transactionToDuplicate.Amount, transactionToDuplicate.Currency,
            transactionToDuplicate.Type, transactionToDuplicate.TransactionCategory, accountId);

        showDuplicateScreen = true;
    }

    string GetFormattedDate(DateTime date)
    {
        return date.ToString("dd/MM/yyyy");
    }

    private void ResetValues()
    {
    // Helps prevent threading-related issues and ensures that UI updates are done
        InvokeAsync(() =>
        {
            SuccesAlert.IsSucess = false;
            ErrorAlert.isError = false;
            OnInitialized();
            StateHasChanged();
        });
    }


}