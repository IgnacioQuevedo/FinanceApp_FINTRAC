@inject ITransactionController TransactionController


@page "/Transactions/{accountId:int}/EditTransaction/{transactionId:int}"



<h3>Transaction Creation</h3>

@if (ErrorAlert.isError)
{
    <ErrorAlert errorTxt="@errorTxt" />
}

<form>

    <div>
        <label for="title">Amount</label>
        <input type="number" class="form-control" id="InitialAmount" @bind="amount" />
    </div>
    <br />
    <div>
        <label for="title">Category</label>
        <select class="form-select" aria-label="Default select example" @onchange="onChangeCategories">
            @foreach (var category in allCategories)
            {
                if (category.CategoryId == categoryOfTransaction.CategoryId)
                {
                    <option value="@category.CategoryId" selected>@category.Name</option>
                }
                else
                {
                    <option value="@category.CategoryId">@category.Name</option>
                }
            }
        </select>
    </div>

    <br />

    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
    <button type="button" class="btn btn-danger" onclick="@(() => NavigationManager.NavigateTo($"/Transactions/{@accountId}"))">Cancel</button>
</form>

<br />


@code
{
    private string title;
    private decimal amount;
    private TypeEnumDTO type;
    private CurrencyEnumDTO currencyType;
    private TypeEnumDTO transactionType;
    private DateTime creationDate;
    private AccountDTO accountOfTransaction;

    private decimal oldAmount;

    private List<CategoryDTO> allCategories;
    
    private CategoryDTO categoryOfTransaction;

    private AccountDTO accountSelected;

    private TransactionDTO transactionUpdated;

    [Parameter]
    public int accountId { get; set; }

    [Parameter]
    public int transactionId { get; set; }

    [CascadingParameter]
    public UserDTO userConnected { get; set; }

    public string errorTxt { get; set; }

    protected override void OnInitialized()
    {
        transactionUpdated = TransactionController.FindTransaction(transactionId, accountId, userConnected.UserId);
        accountOfTransaction = TransactionController.FindAccountById(accountId,userConnected.UserId);
        allCategories = TransactionController.GetAllCategories(userConnected.UserId);
        
        title = transactionUpdated.Title;
        amount = transactionUpdated.Amount;
        type = transactionUpdated.Type;
        creationDate = transactionUpdated.CreationDate;
        currencyType = transactionUpdated.Currency;
        
        categoryOfTransaction = transactionUpdated.TransactionCategory;
        
        ErrorAlert.isError = false;
        SuccesAlert.IsSucess = false;

    }

    private void SaveChanges()
    {
        try
        {
            transactionUpdated = new TransactionDTO(title, creationDate, amount, currencyType, type, categoryOfTransaction,accountId);
            transactionUpdated.TransactionId = transactionId;
            
            TransactionController.UpdateTransaction(transactionUpdated,userConnected.UserId);
            NavigationManager.NavigateTo($"/Transactions/{accountId}");
        }

        catch(Exception ExceptionTransaction)
        {
            errorTxt = ExceptionTransaction.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }
    
    private void onChangeCategories(ChangeEventArgs elementSelected)
    {
        string stringValue = elementSelected.Value.ToString();
        categoryOfTransaction = TransactionController.FindCategory(int.Parse(stringValue), userConnected.UserId);
    }

}

