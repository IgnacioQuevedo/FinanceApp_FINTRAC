@inject ITransactionController TransactionController

@page "/Transactions/{accountId:int}/CreateTransaction"

<h3>Transaction Creation</h3>

@if (ErrorAlert.isError)
{
    <ErrorAlert errorTxt="@errorTxt" />
}


<form>
    <div class="form-group">
        <label for="title">Title</label>
        <input type="text" class="form-control" id="Name" @bind="title" />
    </div>

    <br />

    <div>
        <label for="title">Creation Date</label>
        <input type="date" class="form-control" id="creationDate" @bind="creationDate" />
    </div>

    <br />

    <div>
        <label for="title">Amount</label>
        <input type="number" class="form-control" id="InitialAmount" @bind="amount" />
    </div>

    <div>
        <label for="title">Currency Type</label>
        <select class="form-select" aria-label="Default select example">

            <option value="@accountSelected.Currency">@accountSelected.Currency</option>
        </select>
    </div>

    <br />

    <div>
        <label for="title">Type</label>
        <select class="form-select" aria-label="Default select example" @bind="transactionType">

            @if(accountSelected is MonetaryAccountDTO)
            {
                <option value="@TypeEnumDTO.Income">@TypeEnumDTO.Income</option>
                <option value="@TypeEnumDTO.Outcome">@TypeEnumDTO.Outcome</option>
            }

            else
            {
                <option value="@TypeEnumDTO.Outcome">@TypeEnumDTO.Outcome</option>
            }

        </select>
    </div>

    <br />
    <div>
        <label for="title">Category</label>
        <select class="form-select" aria-label="Default select example" @onchange="OnChangeCategories">
            @foreach (var category in allCategories)
            {
                <option value="@category.CategoryId">@category.Name</option>
            }
        </select>
    </div>

    <br />

    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
    <a href="/Accounts" class="btn btn-danger">Cancelar</a>
</form>

@if (SuccesAlert.IsSucess)
{
    <SuccesAlert errorTxt="Transaction created successfully" />
}


@code
{
    private string title;
    private decimal amount;
    private DateTime creationDate;
    private CurrencyEnumDTO currencyType;
    private TypeEnumDTO transactionType;
    private string categoryName;

    private CategoryDTO categoryToAdd;
    private AccountDTO accountSelected;
    private List<CategoryDTO> allCategories;
    private TransactionDTO transactionToAdd;

    
    [CascadingParameter]
    public UserDTO userConnected { get; set; }
    
    [Parameter]
    public int accountId { get; set; }
    public string errorTxt {get;set;}
    
    protected override void OnInitialized()
    {
        ResetValues();
        
    }

    private void ResetValues()
    {
        title = "";
        amount = 0;
        creationDate = DateTime.Now.Date;
        transactionType = TypeEnumDTO.Outcome;
        currencyType = CurrencyEnumDTO.UY;
        
        
        accountSelected = TransactionController.FindAccountById(accountId,userConnected.UserId);
        allCategories = TransactionController.GetAllCategories(userConnected.UserId);
        
        ErrorAlert.isError = false;
        SuccesAlert.IsSucess = false;
   

        StateHasChanged(); // Notify Blazor that status changes have been made
    }


    private async void SaveChanges()
    {
        try
        {
            transactionToAdd = new TransactionDTO(title,creationDate,amount, accountSelected.Currency, transactionType, 
                categoryToAdd,accountId);
            
            TransactionController.CreateTransaction(transactionToAdd);
            SuccesAlert.ShowSucessAlert();
            await Task.Delay(1500);
            ResetValues();

        }

        catch(Exception ExceptionTransaction)
        {
            errorTxt = ExceptionTransaction.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }
    
    private void OnChangeCategories(ChangeEventArgs elementSelected)
    {
        string stringValue = elementSelected.Value.ToString();
        categoryToAdd = TransactionController.FindCategory(int.Parse(stringValue), userConnected.UserId);
    }
    
}
