@page "/Category/Create/"
<PageTitle>Create Category</PageTitle>

<h3>Category Create</h3>
@using BusinessLogic.Category_Components;
@using BusinessLogic.Enums;


<h1>Create Category</h1>
<form>


    @if (ErrorAlert.isError)
    {
        <ErrorAlert errorTxt="@errorTxt" />
    }

    <div class="form-group">
        <label for="title">Título</label>
        <input type="text" class="form-control" id="Name" @bind="name" />
    </div>
    <br />

    <div>
        <label for="title">Type</label>
        <select class="form-select" aria-label="Default select example" @bind="type">
            <option value="@TypeEnum.Income">@TypeEnum.Income</option>
            <option value="@TypeEnum.Outcome">@TypeEnum.Outcome</option>
        </select>
    </div>

    <br />
    <div>
        <label for="title">Status</label>
        <select class="form-select" aria-label="Default select example" @bind="status">
            <option value="@StatusEnum.Enabled">@StatusEnum.Enabled</option>
            <option value="@StatusEnum.Disabled">@StatusEnum.Disabled</option>
        </select>
    </div>

    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Guardar cambios</button>
    <a href="/Category">Cancelar</a>
</form>
<br />

@if (SuccesAlert.IsSucess)
{
    <SuccesAlert errorTxt="Category created successfully" />
}

@code {
    private string name;
    private StatusEnum status;
    private TypeEnum type;

    [CascadingParameter]
    public User mainUser { get; set; }

    public string errorTxt { get; set; }

    protected override void OnInitialized()
    {
        ResetValues();
    }

    private async void SaveChanges()
    {
        try
        {
            Category newCategory = new Category(name, status, type);
            mainUser.AddCategory(newCategory);
            SuccesAlert.ShowSucessAlert();

            await Task.Delay(2000);
            ResetValues();
        }
        catch (Exception ExceptionCategory)
        {
            errorTxt = ExceptionCategory.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }

    private void ResetValues()
    {
        name = "";
        status = StatusEnum.Enabled;
        type = TypeEnum.Income;
        SuccesAlert.IsSucess = false;
        ErrorAlert.isError = false;
        
        StateHasChanged(); // Notify Blazor that status changes have been made
    }
}
