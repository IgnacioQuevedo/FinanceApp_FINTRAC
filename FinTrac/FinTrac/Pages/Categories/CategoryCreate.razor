@page "/Category/Create/"
@layout MainLayout

@using BusinessLogic.Category_Components;
@using BusinessLogic.Enums;
@inject  ICategoryController CategoryController;

<head>

    <h1>Creation of Category</h1>

</head>

<body>


    @if (ErrorAlert.isError)
    {
        <ErrorAlert errorTxt="@errorTxt" />
    }
    <form>
        <div class="form-group">
            <label for="title">Título</label>
            <input type="text" class="form-control" id="Name" @bind="name" />
        </div>
        <br />

        <div>
            <label for="type">Type</label>
            <select class="form-select" aria-label="Default select example" @bind="type">
                <option value="@TypeEnum.Income">@TypeEnum.Income</option>
                <option value="@TypeEnum.Outcome">@TypeEnum.Outcome</option>
            </select>
        </div>

        <br />
        <div>
            <label for="status">Status</label>
            <select class="form-select" aria-label="Default select example" @bind="status">
                <option value="@StatusEnum.Enabled">@StatusEnum.Enabled</option>
                <option value="@StatusEnum.Disabled">@StatusEnum.Disabled</option>
            </select>
        </div>
    </form>

    <br>

    <div>
    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Guardar cambios</button>
        <a href="/Category">Cancelar</a>
        <br />
    </div>
    <br />
    <div>
        @if (SuccesAlert.IsSucess)
        {
            <SuccesAlert errorTxt="Category created successfully" />
        }
    </div>
</body>

<br />



@code {
    private string name;
    private StatusEnum status;
    private TypeEnum type;

    [CascadingParameter]
    public UserDTO userConnected { get; set; }

    public string errorTxt { get; set; }

    protected override void OnInitialized()
    {
        ResetValues();
    }

    private async void SaveChanges()
    {
        try
        {
            CategoryDTO newCategory = new CategoryDTO(name, status, type,userConnected.UserId);
            CategoryController.CreateCategory(newCategory);
            SuccesAlert.ShowSucessAlert();

            await Task.Delay(2000);
            ResetValues();
        }
        catch (Exception ExceptionCategory)
        {
            errorTxt = ExceptionCategory.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }

    private void ResetValues()
    {
        name = "";
        status = StatusEnum.Enabled;
        type = TypeEnum.Income;        
        // // Helps prevent threading-related issues and ensures that UI updates are done
        // InvokeAsync(() =>
        // {
        //     SuccesAlert.IsSucess = false;
        //     ErrorAlert.isError = false;
        //     StateHasChanged();
        // });
    }

}
