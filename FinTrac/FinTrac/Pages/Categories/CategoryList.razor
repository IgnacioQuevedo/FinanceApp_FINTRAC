@page "/Category"
@using DataManagers
@layout MainLayout
@inject  ICategoryController CategoryController;


<h1>Welcome to your categories page!</h1>
<br/>
<br/>

<div class="form-outline mb-4">
    <center>
        <button class="btn btn-success btn btn-primary fa-lg gradient-custom-2 mb-3" type="button" style="width: 50%;font-size:x-large;text-align:center" onclick="@(() => NavigationManager.NavigateTo("/Category/Create"))">Create + </button>

    </center>
</div>


<head>
    <h4>
        <label style="text-decoration:underline">Category List</label>
        <br/>
    </h4>
</head>

@if (ErrorAlert.isError)
{
    <ErrorAlert errorTxt="@errorTxt"/>
}

<main>
    <table class="table table-striped table-bordered claseTabla">
        <thead>


        <br/>

        <tr>
            <th>Name</th>
            <th>Creation Date</th>
            <th>Status</th>
            <th>Type</th>
            <th>Possible Operations</th>
        </tr>
        </thead>
        <tbody>

        @foreach (var category in categoryList)
        {
            <tr>
                <td>@category.Name</td>
                <td>@GetFormattedDate(category.CreationDate)</td>
                <td>@category.Status</td>
                <td>@category.Type</td>
                <td>

                    <button class="btn btn-success btn-sm button" onclick="@(() => NavigationManager.NavigateTo($"/Category/{@category.CategoryId}/Edit"))">Edit</button>
                    <button class="btn btn-danger btn-sm button" @onclick="(() => DeleteCategory(category.CategoryId))">Delete</button>
                </td>
            </tr>
        }
        </tbody>
        <br/>

    </table>
<label>@nombre</label>

    @if (SuccesAlert.IsSucess)
    {
        <SuccesAlert errorTxt="Category delete with sucess"/>
    }

</main>

@code {
    private List<CategoryDTO>? categoryList;

    [CascadingParameter]
    public UserDTO userConnected { get; set; }

    public string nombre;

    public string errorTxt { get; set; }

    protected override void OnInitialized()
    {
        categoryList = CategoryController.GetAllCategories(userConnected.UserId);
        
        InvokeAsync(() =>
        {
            SuccesAlert.IsSucess = false;
            ErrorAlert.isError = false;
            StateHasChanged();
        });
        nombre = userConnected.FirstName;
    }

    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            CategoryController.DeleteCategory(CategoryController.FindCategory(categoryId, userConnected.UserId));
            SuccesAlert.ShowSucessAlert();
            await Task.Delay(1000);
            OnInitialized();
        }
        catch (Exception ExceptionCategory)
        {
            errorTxt = ExceptionCategory.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }

    string GetFormattedDate(DateTime date)
    {
        return date.ToString("dd/MM/yyyy");
    }

    public void ResetValues()
    {
        
    }
}