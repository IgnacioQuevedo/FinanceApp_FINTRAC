@page "/Category"
<PageTitle>Categories List</PageTitle>

@using BusinessLogic.Category_Components;

<h3>Categories</h3>

<h1>
    Categories List
    <a class="btn btn-success btn-sm" style="float: right;margin-right: 40px;" onclick="@(() => NavigationManager.NavigateTo("/Category/Create"))" >Create + </a>
</h1>
<table class="table">
    <thead>

        @if (ErrorAlert.isError)
        {
            <ErrorAlert errorTxt="@errorTxt" />
        }

        <br />

        <tr>
            <th>Name</th>
            <th>Creation Date</th>
            <th>Status</th>
            <th>Type</th>
        </tr>
    </thead>
    <tbody>

        @foreach (var category in categoryList.Where(t => t != null))
        {
            <tr>
                <td>@category.Name</td>
                <td>@GetFormattedDate(category.CreationDate)</td>
                <td>@category.Status</td>
                <td>@category.Type</td>
                <td>
                    <a class="btn btn-success btn-sm" href="/Category/@category.CategoryId/Edit">Edit</a>
                    <button class="btn btn-danger btn-sm" @onclick="(() => DeleteCategory(category.CategoryId))">Delete</button>
                </td>
            </tr>
        }
    </tbody>
    <br />

    @if (SuccesAlert.IsSucess)
    {
        <SuccesAlert errorTxt="Category delete with sucess" />
    }


</table>

@code {
    private List<Category>? categoryList;

    [CascadingParameter]
    public User user { get; set; }

    public string errorTxt { get; set; }

    protected override void OnInitialized()
    {
        categoryList = user.GetCategories();
        SuccesAlert.IsSucess = false;
        ErrorAlert.isError = false;
    }

    private void DeleteCategory(int categoryId)
    {
        try
        {
            user.DeleteCategory(user.MyCategories[categoryId]);
            SuccesAlert.ShowSucessAlert();
        }
        catch(Exception ExceptionCategory)
        {
            errorTxt = ExceptionCategory.Message;
            ErrorAlert.ShowErrorAlert();
        }

    }

    string GetFormattedDate(DateTime date)
    {
        return date.ToString("dd/MM/yyyy");
    }


}

