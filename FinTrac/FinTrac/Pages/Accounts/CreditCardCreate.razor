@page "/Account/CreditCardCreation"

@inject ICreditAccount CreditController;


<h3>Credit Card Creation</h3>


<form>
    <br />
    @if (ErrorAlert.isError)
    {
        <ErrorAlert errorTxt="@errorTxt" />
    }
    <br />

    <div class="form-group">
        <label for="title">Título</label>
        <input type="text" class="form-control" id="Name" @bind="name" />
    </div>

    <br />

    <div>
        <label for="title">Issuing Bank</label>
        <input type="text" class="form-control" id="InitialAmount" @bind="issuingBank" />
    </div>

    <br />

    <div>
        <label for="title">Last 4 Digits Of Card</label>
        <input type="number" class="form-control" id="last4Dibits" @bind="last4Digits" />
    </div>

    <div>
        <label for="title">Currency Type</label>
        <select class="form-select" aria-label="Default select example" @bind="currencyType">
            <option value="@CurrencyEnumDTO.UY">@CurrencyEnumDTO.UY</option>
            <option value="@CurrencyEnumDTO.USA">@CurrencyEnumDTO.USA</option>
            <option value="@CurrencyEnumDTO.USA">@CurrencyEnumDTO.EUR</option>
        </select>
    </div>

    <br />

    <div>
        <label for="title">Available Credit</label>
        <input type="number" class="form-control" id="InitialAmount" @bind="availableCredit" />
    </div>

    <br />

    <div>
        <label for="title">Creation Date</label>
        <input type="date" class="form-control" id="InitialAmount" @bind="creationDate" />
    </div>


    <br />

    <div>
        <label for="title">Closing Date</label>
        <input type="date" class="form-control" id="InitialAmount" @bind="closingDate" />
    </div>

    <br />

    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Guardar cambios</button>
    <a href="/Accounts">Cancelar</a>
    <br />
    @if (SuccesAlert.IsSucess)
    {
        <SuccesAlert errorTxt="Credit card created successfully" />
    }
</form>


@code
{

    private string name;
    private string issuingBank;
    private string last4Digits;
    private CurrencyEnumDTO currencyType;
    private decimal availableCredit;
    private DateTime creationDate;
    private DateTime closingDate;

    private CreditCardAccountDTO accountToAdd;
    public string errorTxt { get; set; }

    [CascadingParameter]
    public UserDTO UserConnected { get; set; }

    protected override void OnInitialized()
    {

        currencyType = CurrencyEnumDTO.UY;
        creationDate = DateTime.Now.Date;
        closingDate = DateTime.Now.Date;
        SuccesAlert.IsSucess = false;
        ErrorAlert.isError = false;
    }

    private void SaveChanges()
    {
        try
        {
            accountToAdd = new CreditCardAccountDTO(name, currencyType, creationDate, issuingBank, last4Digits, availableCredit, closingDate, UserConnected.UserId);
            CreditController.CreateCreditAccount(accountToAdd);
            SuccesAlert.ShowSucessAlert();
        }
        catch (Exception ExceptionAccount)
        {
            errorTxt = ExceptionAccount.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }

    private void ResetValues()
    {
        currencyType = CurrencyEnumDTO.UY;
        creationDate = DateTime.Now.Date;
        closingDate = DateTime.Now.Date;

        InvokeAsync(() =>
        {
            SuccesAlert.IsSucess = false;
            ErrorAlert.isError = false;
            StateHasChanged();
        });
    }

}
