@page "/Account/MonetaryCreation"

@inject IMonetaryAccount MonetaryController;

<h3>Monetary Account Creation</h3>


<form>
    @if (ErrorAlert.isError)
    {
        <ErrorAlert errorTxt="@errorTxt" />
    }

    <div class="form-group">
        <label for="title">Título</label>
        <input type="text" class="form-control" id="Name" @bind="name" />
    </div>

    <br />

    <div>
        <label for="title">Initial Amount</label>
        <input type="number" class="form-control" id="InitialAmount" @bind="initialAmount" />
    </div>

    <br />

    <div>
        <label for="title">Currency</label>
        <select class="form-select" aria-label="Default select example" @bind="currencyType">
            <option value="@CurrencyEnumDTO.UY">@CurrencyEnumDTO.UY</option>
            <option value="@CurrencyEnumDTO.USA">@CurrencyEnumDTO.USA</option>
            <option value="@CurrencyEnumDTO.EUR">@CurrencyEnumDTO.EUR</option>
        </select>
    </div>

    <br />

    <div>
        <label for="title">Creation Date</label>
        <input type="date" class="form-control" id="initialDate" @bind="creationDate" />
    </div>

    <br />

    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Guardar cambios</button>
    <a href="/Accounts">Cancelar</a>

    <br />

    @if (SuccesAlert.IsSucess)
    {
        <SuccesAlert errorTxt="Monetary account created successfully" />
    }
</form>




@code
{

    private string name;
    private decimal initialAmount;
    private CurrencyEnumDTO currencyType;
    private DateTime creationDate;
    private List<MonetaryAccountDTO> monetaryAccountList;
    private MonetaryAccountDTO accountToCreate;


    [CascadingParameter]
    public UserDTO UserConnected { get; set; }
    public string errorTxt { get; set; }

    protected override void OnInitialized()
    {
        ResetValues();
    }

    private async void SaveChanges()
    {
        try
        {
            accountToCreate = new MonetaryAccountDTO(name, initialAmount, currencyType, creationDate, UserConnected.UserId);
            MonetaryController.CreateMonetaryAccount(accountToCreate);
            SuccesAlert.ShowSucessAlert();
            await Task.Delay(2000);
            ResetValues();
        }
        catch (Exception ExceptionAccount)
        {
            errorTxt = ExceptionAccount.Message;
            ErrorAlert.ShowErrorAlert();
        }

    }

    private void ResetValues()
    {
        name = "";
        initialAmount = 0;
        currencyType = CurrencyEnumDTO.UY;
        creationDate = DateTime.Now.Date;
        monetaryAccountList = MonetaryController.GetAllMonetaryAccounts(UserConnected.UserId);

        SuccesAlert.IsSucess = false;
        ErrorAlert.isError = false;

        StateHasChanged(); // Notify Blazor that status changes have been made
    }

}
