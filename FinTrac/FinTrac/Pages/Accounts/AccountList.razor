@page "/Accounts";

@inject IMonetaryAccount MonetaryController;
@inject ICreditAccount CreditController;

<PageTitle>Accounts</PageTitle>

<head>
   
</head>
<h1>Accounts of @userConnected.FirstName</h1>

<br />
<br />
<main>
    <h3>
        Monetary List
        <a class="btn btn-success btn btn-primary fa-lg gradient-custom-2 mb-3" style="float: right;margin-right: 40px;"
           onclick="@(() => NavigationManager.NavigateTo("/Account/MonetaryCreation"))">
            Create Monetary Account +
        </a>
    </h3>


    <br />
    <br />

            @if (monetaryAccountList != null && monetaryAccountList.Count != 0)
            {
            <table class="table table-striped table-bordered claseTabla">
                <thead>
                    <tr>
                        <th>Name</th>
                        @* <th>Initial Amount</th> *@
                        <th>Current Amount</th>
                        <th>Currency</th>
                        <th>Creation Date</th>
                        <th>Posible Operations</th>
                    </tr>
                </thead>
            <tbody>
                @foreach (var monetAccount in monetaryAccountList)
                {
                    <tr>
                        <td>@monetAccount.Name</td>
                        @* <td>@monetAccount.InitialAmount</td> *@
                        <td>@monetAccount.Amount</td>
                        <td>@monetAccount.Currency</td>
                        <td>@GetFormattedDate(monetAccount.CreationDate)</td>
                        <td>
                            <button class="btn btn-success" onclick="@(() => NavigationManager.NavigateTo($"/Accounts/{@monetAccount.AccountId}/ModifyMonetary"))"> Edit</button>
                            <button class="btn btn-danger" @onclick="(() => DeleteMonetaryAccountUI(monetAccount))">Delete</button>
                            <button class="btn btn-info" onclick="@(() => NavigationManager.NavigateTo($"/Transactions/{@monetAccount.AccountId}"))">View Transactions</button>
                        </td>
                    </tr>
                }
            </tbody>
            </table>
            }
            else
            {
        <table class="table table-striped table-bordered claseTabla">
            <tbody>
                <tr>
                    <td>There are no monetary accounts to show</td>
                </tr>
            </tbody>
        </table>

            }

    <br />
    <br />

    <h3>
        Credit Card List
        <a class="btn btn-success btn btn-primary fa-lg gradient-custom-2 mb-3" style="float: right;margin-right: 40px;"
           onclick="@(() => NavigationManager.NavigateTo("/Account/CreditCardCreation"))">
            Create Credit Card +
        </a>
    </h3>

    <br />
    <br />
            @if (creditAccountList != null && creditAccountList.Count != 0)
            {
            <table class="table table-striped table-bordered claseTabla">

            <thead>
                <tr>
                    <th>Name</th>
                    <th>Issuing Bank</th>
                    <th>Last 4 Digits</th>
                    <th>Currency</th>
                    <th>Available Credit</th>
                    <th>Creation Date</th>
                    <th>Closing Date</th>
                    <th> Posible Operations</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var creditAccount in creditAccountList)
                {
                    <tr>
                        <td>@creditAccount.Name</td>
                        <td>@creditAccount.IssuingBank</td>
                        <td>@creditAccount.Last4Digits</td>
                        <td>@creditAccount.Currency</td>
                        <td>@creditAccount.AvailableCredit</td>
                        <td>@GetFormattedDate(creditAccount.CreationDate)</td>
                        <td>@GetFormattedDate(creditAccount.ClosingDate)</td>

                        <td>
                            <button class="btn btn-success" onclick="@(() => NavigationManager.NavigateTo($"/Accounts/{@creditAccount.AccountId}/CreditCardModification"))"> Edit</button>
                            <button class="btn btn-danger" @onclick="(() => DeleteCreditAccountUI(creditAccount))">Delete</button>
                            <button class="btn btn-info" onclick="@(() => NavigationManager.NavigateTo($"/Transactions/{@creditAccount.AccountId}"))">View Transactions</button>
                        </td>
                    </tr>

                }
            </tbody>
            </table>
            }
            else
            {
                <table class="table table-striped table-bordered claseTabla">
                    <tbody>
                        <tr>
                            <td>There are no credit accounts to show</td>
                        </tr>
                    </tbody>
                </table>
            }
            @if (SuccesAlert.IsSucess)
            {
                <SuccesAlert errorTxt="Transaction deleted successfully" />
            }

            @if (ErrorAlert.isError)
            {
                <ErrorAlert errorTxt="@errorTxt" />
            }
</main>


@code {
    private List<MonetaryAccountDTO>? monetaryAccountList;
    private List<CreditCardAccountDTO>? creditAccountList;

    [CascadingParameter]
    public UserDTO userConnected { get; set; }
    public string errorTxt { get; set; }

    protected override void OnInitialized()
    {
        monetaryAccountList = MonetaryController.GetAllMonetaryAccounts(userConnected.UserId);
        creditAccountList = CreditController.GetAllCreditAccounts(userConnected.UserId);
        SuccesAlert.IsSucess = false;
        ErrorAlert.isError = false;
    }

    private void DeleteMonetaryAccountUI(MonetaryAccountDTO monetAccountDTO)
    {
        try
        {
            MonetaryController.DeleteMonetaryAccount(monetAccountDTO);
            SuccesAlert.ShowSucessAlert();
            OnInitialized();
        }
        catch (Exception ExceptionAccount)
        {
            errorTxt = ExceptionAccount.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }    
    private void DeleteCreditAccountUI(CreditCardAccountDTO creditAccountDTO)
    {
        try
        {
            CreditController.DeleteCreditAccount(creditAccountDTO);
            SuccesAlert.ShowSucessAlert();
            OnInitialized();
        }
        catch (Exception ExceptionAccount)
        {
            errorTxt = ExceptionAccount.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }

    string GetFormattedDate(DateTime date)
    {
        return date.ToString("dd/MM/yyyy");
    }


}




