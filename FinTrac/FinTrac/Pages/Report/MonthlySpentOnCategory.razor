@page "/Report/MonthlySpentOnCategory"

@inject IReportController ReportController;

<h3>Montly Spent On Category</h3>

@if (ErrorAlert.isError)
{
    <ErrorAlert errorTxt="@errorTxt"/>
}

<select class="form-select" aria-label="multiple select example" @bind="monthSelected">

    @foreach (MonthsEnumDTO month in Enum.GetValues(typeof(MonthsEnumDTO)))
    {
        <option value="@month"> @month </option>
    }

</select>


<div class="form-group">
    <label for="title">Confirm Selection Of Month Report</label>
    <button type="button" class="btn btn-outline-danger" @onclick="GenerateReport">Create + </button>
</div>

<br/>
<br/>

@if (ConfirmedMonth)
{
    <table class="table">
        <thead>
        <tr>
            <th>Category Name</th>
            <th>Amount Spent on category</th>
            <th>Percentage Of Total</th>
        </tr>
        </thead>
        <tbody>

        @foreach (var categoryReport in reportsOfEachCategory)
        {
            <tr>
                <td>@categoryReport.CategoryRelated.Name</td>
                <td>@categoryReport.TotalSpentInCategory</td>
                <td>@Math.Round(categoryReport.PercentajeOfTotal)%</td>
            </tr>
        }
        </tbody>
    </table>
}

<div class="form-group">
    <label for="title">Confirm Selection Of Month Report</label>
    <button type="button" class="btn btn-outline-danger" @onclick="ShowGraphic"># Show Graphic # </button>
</div>

<td>
    <button class="btn btn-success btn-sm" onclick="@(() => NavigationManager.NavigateTo($"/Reports"))"> Go Back</button>
</td>

<br/>
<div>
    @if (SuccesAlert.IsSucess)
    {
        <SuccesAlert errorTxt="Now graph is available"/>
    }
</div>


@code
{
    [CascadingParameter]
    public UserDTO UserConnected { get; set; }

    public string errorTxt { get; set; }

    private List<ResumeOfCategoryReportDTO>? reportsOfEachCategory;
    private MonthsEnumDTO monthSelected;
    private bool ConfirmedMonth;


    protected override void OnInitialized()
    {
        monthSelected = (MonthsEnumDTO)DateTime.Now.Month;
        reportsOfEachCategory = null;
        ConfirmedMonth = false;
        ResetValues();
    }

    private async Task GenerateReport()
    {
        try
        {
            reportsOfEachCategory = ReportController.GiveAllSpendingsPerCategoryDetailed(UserConnected, monthSelected);
            ConfirmedMonth = true;
            SuccesAlert.ShowSucessAlert();
            await Task.Delay(1300);
            ResetValues();
        }
        catch (Exception Exception)
        {
            errorTxt = Exception.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }

    public void ShowGraphic()
    {
        if (reportsOfEachCategory != null)
        {
            NavigationManager.NavigateTo($"/pie/{(int)monthSelected}");
        }
        else
        {
            errorTxt = "You must click un create button first to show graph";
            ErrorAlert.ShowErrorAlert();
        }
        
    }
    
    private void ResetValues()
    {
        InvokeAsync(() =>
        {
            SuccesAlert.IsSucess = false;
            ErrorAlert.isError = false;
            StateHasChanged();
        });
    }

}