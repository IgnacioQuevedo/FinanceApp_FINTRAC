@page "/pie/{monthSelected:int}"

@inject IReportController ReportController
@inject IJSRuntime JSRuntime

<main>
    <html>
    <head>
        <script suppress-error="BL9992" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </head>

    <div>

        <button class="btn btn-success btn-sm" onclick="@(() => NavigationManager.NavigateTo($"/Report/MonthlySpentOnCategory"))"> Go Back</button>
    </div>

    <div class="chart-container">
        <canvas id="myChartMonthlySpent"></canvas>
    </div>


    </html>
</main>

@code {

    [Parameter]
    public MonthsEnumDTO monthSelected { get; set; }

    [CascadingParameter]
    public UserDTO UserConnected { get; set; }

    private List<ResumeOfCategoryReportDTO> reportsOfEachCategory;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            reportsOfEachCategory = ReportController.GiveAllSpendingsPerCategoryDetailed(UserConnected, monthSelected);
            StateHasChanged();
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo("/Home");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && reportsOfEachCategory != null)
        {
            await JSRuntime.InvokeAsync<object>("initializeMonthlySpentChart", reportsOfEachCategory);
        }
    }

}
<script suppress-error="BL9992">

    class MonthlySpentChart {
        constructor(reportsOfEachCategory) {
            this.reportsOfEachCategory = reportsOfEachCategory;
            this.chart = null;
        }

        initializeChart() {
            var ctx = document.getElementById("myChartMonthlySpent");

            if (this.chart) {
                this.chart.destroy();
            }

            var totalSpentData = this.reportsOfEachCategory.map(function (item) {
                return item.totalSpentInCategory;
            });

            var labels = this.reportsOfEachCategory.map(function (item) {
                return item.categoryRelated.name + " " + Math.round(item.percentajeOfTotal).toString() + "%";
            });

            this.chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: "Spent on each category per month",
                            data: totalSpentData,
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(255, 159, 64, 0.2)'
                            ],
                            borderColor: [
                                'rgba(255,99,132,1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                            ],
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'REPORT OF MONTHLY SPENDINGS ON CATEGORIES'
                        }
                    }
                },
            });
        }
    }

    var monthlySpentChart;

    function initializeMonthlySpentChart(reportsOfEachCategory) {
        monthlySpentChart = new MonthlySpentChart(reportsOfEachCategory);
        monthlySpentChart.initializeChart();
    }

</script>
