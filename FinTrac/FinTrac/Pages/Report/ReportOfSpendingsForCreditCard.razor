@page "/Report/SpendingsOfCreditCard"

@inject IReportController ReportController;

<h3>Spendings of Credit Card this Month</h3>

<select class="form-select" aria-label="Default select example" @onchange="OnChangeEvent">
    <option disabled selected value=""> Select a Credit Account for the report</option>
    @foreach (CreditCardAccountDTO creditAccount in creditAccounts)
    {
        <option value="@creditAccount.AccountId">@creditAccount.IssuingBank, @creditAccount.Last4Digits</option>
    }

</select>

<br />
<br />

<button type="button" class="btn btn-primary" @onclick="ShowSpendings">Show Spendings</button>

<br />
<br />
<br />
<td>

</td>


@if (showSpendings && transactionsOfCard.Count>0)
{
    <table class= "table table-striped table-bordered claseTabla">
        <thead>
            <tr>
                <th>Title</th>
                <th>Creation Date</th>
                <th>Amount</th>
                <th>Currency</th>
                <th>Type</th>
                <th>Category</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var transaction in transactionsOfCard)
            {
                <tr>
                    <td>@transaction.Title</td>
                    <td>@GetFormattedDate(@transaction.CreationDate)</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Currency</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.TransactionCategory.Name</td>
                </tr>

            }
        </tbody>
    </table>

    <br>
    <br>
}
else
{
    <table class="table table-striped table-bordered claseTabla">
        <tbody>
            <tr>
                <td>There are no transactions to show for this month</td>
            </tr>
        </tbody>
    </table>
}
<button class="btn btn-success btn-sm" onclick="@(() => NavigationManager.NavigateTo($"/Reports"))"> Go Back</button>
 <div>
        @if (ErrorAlert.isError)
        {
            <ErrorAlert errorTxt="@errorTxt"/>
        }
    </div>

@code
{
    [CascadingParameter]
    public UserDTO UserConnected { get; set; }

    public string errorTxt { get; set; }

    private List<CreditCardAccountDTO> creditAccounts;
    private List<TransactionDTO> transactionsOfCard;
    private CreditCardAccountDTO myCard;

    private bool showSpendings;
    private int creditCardId;

    protected override void OnInitialized()
    {
        ResetValues();
    }

    private void ShowSpendings()
    {
        try
        {
            myCard = ReportController.FindCreditAccount(creditCardId, UserConnected.UserId);
            transactionsOfCard = ReportController.ReportOfSpendingsPerCard(myCard);
            showSpendings = true;
            ResetAlerts();
        }
        catch (Exception Exception)
        {
            errorTxt = Exception.Message;
            ErrorAlert.ShowErrorAlert();
        }
      
    }

    private void OnChangeEvent(ChangeEventArgs elementSelected)
    {
        string stringValue = elementSelected.Value.ToString();
        creditCardId = int.Parse(stringValue);
    }
    string GetFormattedDate(DateTime date)
    {
        return date.ToString("dd/MM/yyyy");
    }

    public void ResetAlerts()
    {
        InvokeAsync(() =>
        {
            ErrorAlert.isError = false;
            StateHasChanged();
        });
    }

    private void ResetValues()
    {
        creditCardId = -1;
        creditAccounts = ReportController.GetAllCreditAccounts(UserConnected.UserId);
        showSpendings = false;
      
    }

}

