@inject GenericController Controller
@inject IJSRuntime JSRuntime

@page "/Report/MonthlyMovements"

<h3>Montly movements Of Transactions</h3>
@if (ErrorAlert.isError)
{
    <ErrorAlert errorTxt="@errorTxt"/>
}
<main>
    <select class="form-select" aria-label="multiple select example" @bind="monthSelected">

        @foreach (MonthsEnumDTO month in Enum.GetValues(typeof(MonthsEnumDTO)))
        {
            <option value="@month"> @month </option>
        }

    </select>

    <div class="form-group">
        <label for="title">Select Initial Date</label>
        <input type="date" class="form-control" id="Name" @bind="initialDate"/>
    </div>

    <div class="form-group">
        <label for="title">Select Final Date</label>
        <input type="date" class="form-control" id="Name" @bind="finalDate"/>
    </div>

    <div class="form-group">
        <label for="title">Confirm Selection Of Month Report</label>
        <button type="button" class="btn btn-outline-danger" @onclick="GenerateReport">Create + </button>
    </div>

    <br/>
    <br/>
    <div>
        @if (SuccesAlert.IsSucess)
        {
            <SuccesAlert errorTxt="Category created successfully"/>
        }
    </div>
    <br/>
    <br/>
    
    <html>
    <head>
        <script suppress-error="BL9992" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    </head>

    <div class="chart-container">
        <canvas id="myChart"></canvas>
    </div>
    </html>
</main>


@code
{
    [CascadingParameter]
    public UserDTO userConnected { get; set; }

    public string errorTxt { get; set; }

    private MovementInXDaysDTO movements;
    private RangeOfDatesDTO rangeOfDates;
    private MonthsEnumDTO monthSelected =(MonthsEnumDTO)DateTime.Now.Month; 
    private DateTime initialDate;
    private DateTime finalDate;
    
    private async Task GenerateReport()
    {
        try
        {
            rangeOfDates = new RangeOfDatesDTO(initialDate, finalDate);
            movements = Controller.GetMovementsOfTransactionsInXDays(userConnected.UserId, rangeOfDates,monthSelected);

            ShowGraphic();
            SuccesAlert.ShowSucessAlert();
            await Task.Delay(1500);
            ResetValues();
        }
        catch (Exception ExceptionReport)
        {
            errorTxt = ExceptionReport.Message;
            ErrorAlert.ShowErrorAlert();
        }
    }

    private void ResetValues()
    {
        InvokeAsync(() =>
        {
            SuccesAlert.IsSucess = false;
            ErrorAlert.isError = false;
            StateHasChanged();
        });
    }

    public async Task ShowGraphic()
    {
        await JSRuntime.InvokeAsync<object>("initializeChart", movements.Incomes, movements.Spendings);
        StateHasChanged();
    }
}

<script suppress-error="BL9992">

    var myChart;

    function initializeChart(incomes, spendings) {
        var ctx = document.getElementById("myChart");

        if (myChart) {
            myChart.destroy();
        }

        var totalSpentData1 = incomes.map(function (item) {
            return item;
        });

        var totalSpentData2 = spendings.map(function (item) {
            return item;
        });

        var labels = Array.from({ length: 31 }, (_, index) => index + 1);

        myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: "Incomes",
                        data: totalSpentData1,
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    },
                    {
                        label: "Spendings",
                        data: totalSpentData2,
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'REPORT OF MONTHLY TRANSACTIONS SUMMING UP ALL ACCOUNTS'
                    }
                }
            },
        });
    }

</script>

<td>
    <button class="btn btn-success btn-sm" onclick="@(() => NavigationManager.NavigateTo($"/Report/MonthlySpentOnCategory"))"> Go Back</button>
</td>