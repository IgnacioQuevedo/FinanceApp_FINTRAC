@page "/Report/MonetaryBalance"

@inject IReportController ReportController;

<h3>Monetary Balance</h3>

 @if (ErrorAlert.isError)
    {
        <ErrorAlert errorTxt="@errorTxt" />
    }

<select class="form-select" aria-label="select example" @onchange="OnSearchInitDate">

    @foreach (MonetaryAccountDTO monetAccountToReport in monetaryAccountsList)
    {
        <option value="@monetAccountToReport.AccountId">@monetAccountToReport.Name</option>
    }

</select>

<br />
<div>
    <button type="button" class="btn btn-primary" @onclick="ShowBalance">Show Balance</button>
    <br/>
</div>
<br/>
<br/>
<label>Account balance: </label>
<input type="number" class="form-control" id="Name" @bind="accountBalance"/>

<br>
<td>
    <button class="btn btn-success btn-sm" onclick="@(() => NavigationManager.NavigateTo($"/Reports"))"> Go Back</button>
</td>
<br/>
  <div>
        @if (SuccesAlert.IsSucess)
        {
            <SuccesAlert errorTxt="Balance created successfully!" />
        }
    </div>

@code
{
    [CascadingParameter]
    public UserDTO UserConnected { get; set; }

    public string errorTxt { get; set; }

    private decimal accountBalance;
    private MonetaryAccountDTO myAccount;
    private List<MonetaryAccountDTO> monetaryAccountsList;

    protected override void OnInitialized()
    {
        monetaryAccountsList = ReportController.GetAllMonetaryAccounts(UserConnected.UserId);
        myAccount = monetaryAccountsList[0];
    }
    
    private async Task ShowBalance()
    {
        try
        {
            accountBalance = ReportController.GiveAccountBalance(myAccount);
            SuccesAlert.ShowSucessAlert();
            await Task.Delay(1300);
            ResetValues();
        }
        catch (Exception Exception)
        {
            errorTxt = Exception.Message;
            ErrorAlert.ShowErrorAlert();
        }
        
    }
    private void OnSearchInitDate(ChangeEventArgs elementSelected)
    {
        string idSelected = elementSelected.Value.ToString();
        myAccount = ReportController.FindMonetaryAccount(int.Parse(idSelected), UserConnected.UserId);
        
    }
    
    private void ResetValues()
    {
        InvokeAsync(() =>
        {
            SuccesAlert.IsSucess = false;
            ErrorAlert.isError = false;
            OnInitialized();
            StateHasChanged();
        });
    }

}
